input_raw = '''9 * 7 + ((6 + 9 * 2 + 6 + 7 + 5) * (5 + 9 + 7) * 6) * (4 + 8) + 5 * 8
3 * (4 * 9 + 8 + 4 * 4 + 7) + 7 * (8 * 9)
4 * ((6 * 5 * 9) + 2) + 9 * 4
((4 * 6 * 2 * 9) + 7 * 4) + 4 * 6 + 5 * 6 + 6
9 * 8 * ((5 + 7 * 8 * 2) * 6) + 3
6 + (3 * 7) * 3 + (9 * (6 * 6 + 5 + 9 + 9) * 7 * 9 + (4 * 8) + 8)
6 * 4 + 2 + 8 + 7
(5 * (9 * 8) * 6) + 2 + 8 * 5 * 4 * 3
(3 + 2 * 2 * 8 * 5) + (7 + 6 * 4 * 8) * (6 * 9 * 5 * 9)
(4 * 2 + (9 + 2 * 4) * 5 + 9) + (9 * 3)
7 * 6 + 6
4 + (8 + (5 * 9) + 9 * 8)
9 + 8 + 5 + 4 * 2 * 9
8 * (5 + (8 + 2) * 9 + 4 + 7) + 8
2 * 2 + 9 * 6 + (2 * (8 * 2 + 3 * 8) * (9 + 7 * 4 * 8 * 2)) * 2
4 + (5 * 6 + 7 * 5) + 4
4 + (9 * 4) + 4 * (4 + 7 + 9 * 4) * 3
(4 * (2 + 2) * 9 * 8 * 3) + 9 * 3
6 * (5 * 3 + 4 + (4 + 4 + 5 * 7 * 4)) * 4
8 * (6 * 9 + 3 * (6 * 6 * 2) + 4 + 9) * (4 * 8 * (9 * 4 + 8 + 7 * 7) * 5) + 4 + 7
(7 * 3 * 2) + 3 + 8 * (5 + 7 * 3 + 4 * 2 * (8 + 6 * 4)) * 3 * (8 + 9 + 7 * 3 * 3)
8 * 7 + 4 + 7 * (3 * 3 + 7 + (3 * 5 * 8 + 8 + 3 * 4))
(7 * (4 * 3 + 8 * 7 * 3 + 9) * 4 + (4 * 7)) * 8 + ((2 * 9) + 6 * 7 + (9 + 3) * 5 + 2) * 8 + 6
6 + 8 * (7 * (5 + 3 + 8 * 5 + 2 * 7) * 4 + 2 + 7 + 7)
(6 * 3 * 7) * 7 * (7 * 7 * 9) + 8
((8 * 7 + 2 + 3) * 4) + 4 * 7 * 6 + 5
2 * 5 * 4 * 9 + ((2 * 4 * 4) + 4 * (5 + 4))
((3 + 5 * 5) + (5 * 9 + 5)) * 3
8 * (3 * (9 * 3 * 9) + 3 + 5) * 2
4 * (8 * 9 * 7 * 2 + 3) + ((9 * 8) * 9) * (4 * 5 + 6 * 8) * 3
(5 + 2 * 9 + 5 + 8) + 9 + 6 * 2
(5 * 9 + 9 + 3 + (5 + 9 + 4 + 3)) + 8 * 7
(7 + 7 * 2 + 8) * (2 * 4 + 3 * 4) + 5 * 4
3 + (4 + 6) + 8 * 5
(6 + 5 * (8 + 2 + 6) * (2 + 9)) * ((3 + 2 * 8 + 4 * 9 * 3) * 6 * 9)
9 + (5 * (2 + 2 * 2) + 5 * 8) * 7 + 3 + 9
2 + 8 * ((2 + 2) * 2 + 4 * 3 + 3) * 5
(2 + 5 * 3 * (4 * 3 + 8 + 6) + 6) + ((7 + 9) + 4 * 3) + 6 * 9
(8 + 7 * (8 + 3 * 7 + 4 + 7) + (5 + 6)) + 4 * (9 * 2 + (8 + 7 * 4 * 6 + 3) + 7 + 2) + (3 * (2 + 2 * 3))
(3 * 6 * 4 * 8 + 4) + 6 + 3 * 3 + 4
8 + ((6 * 2) + 6 * (8 + 5 * 2 * 2 * 9 + 8)) * 5 * 7
7 + 3 + 5 + ((3 + 8 + 2) * 5 * 9 * 4 * 9 + 5)
4 * 5 * (8 + 6)
9 * 7 * 4 + (4 + 5) * 4
9 + 6 + (8 * 5 * (3 + 2 * 7 + 2 + 2 + 9) + 8 * (8 * 5 + 5 * 5 * 3 * 7) * (5 * 3 + 8 + 7 * 4)) + 7 + 2 * 5
6 + ((2 * 3 + 9 * 8 * 8) + 6 * (5 * 5)) * 2 + 3 * (2 + (7 * 8 * 9 * 4 + 7 * 3) * 2 * 7 * (7 + 3 + 2 * 7 + 9 + 2)) + (3 * 9 + 2 * 8 * 4 * 2)
(7 * 4) * 2 + 7 + 2 + 3
(5 + 6 + 8) + 8 + 3 + (5 + 8 * 5 + 5 + 8) + 3
2 * (6 * (3 + 5)) + 4 + (3 + 9 * 5 + 8 + (6 + 4 + 2 + 2 * 2 * 4)) * 3 + 8
(2 + 7 + 3) + 7 + 2 + 6 * (6 * (4 + 7 * 8 * 5)) * 4
7 * 5 + 3 + 3
4 * (2 + 3 + 5) * 2 * 3
(8 * 8 + (7 * 4 * 6 * 6 + 2 * 6) + (8 + 6 + 2) * 7 * 8) + (3 * (8 + 9 + 6) + 4 * 7) + 5 * 8
(7 * 8 * 2 + 3 * 9) * ((4 * 4 + 5) + (6 + 4 + 9 + 5) + 3 * 2 * (2 + 5 * 7)) + 4 + 8 * ((8 * 8 + 5 * 4 * 3 + 4) * 5 + 4 * 4 + 4 + 7)
(9 + 8 + (4 + 2 * 9) + 7 + 7) + 7 * 8
(3 * 5 + (7 + 5 * 2 + 2)) * 4
(5 + 8) * 6 + (6 + (7 + 4 + 3 + 2 + 6 + 9))
4 * 2 + 2 + 9 + 3 + (2 * 6 * (2 * 2 * 8) + 6 * (3 + 2 * 3 * 4 + 9) * 7)
(7 + (9 + 8 + 6 * 6 * 2)) + 6 * (8 * 9 * (5 * 7 + 6 + 3)) + 4
(3 * (9 + 2) + 6 + 6) + 4 * 4 * 4 * 7
4 * 4 + 6 * 3 * 2 * 7
3 + (7 + 3 + (4 + 4 * 3 + 5 + 4) * 9 + (2 + 5 + 7 * 7 * 2) * 4)
5 * (3 * 6 * (7 + 2 * 2) + 7 + 7) + (2 + 7 + 3 * 7 * 6) + 3 * 4 + 4
2 * 4 * 2 * (8 * (7 * 7) * 7 * (2 * 8 + 7)) + 5
4 + 6 + (8 * 9 + 4 + 8 + 4) * 3
5 * 9 * 9 + 4 + 2 + (3 + (5 + 9))
(9 + 8 + (6 * 5 + 7 * 5 * 4) + (6 + 7 * 2 + 8 + 6)) * 4 + 8 * 6 + 8
7 * 2 + ((7 + 3 * 7 * 7 * 2) * (9 * 9 * 8 + 7) * (7 + 9 * 4 * 2 + 3) + 6) * 6
8 * 4 + 9 + 7 * (6 + 9)
6 + 3 + 3 * 7 + ((8 + 9) * 4) * 6
7 + 6 * (2 * (6 + 7) * (8 * 6)) + 5 + 7
7 * (5 + 9 * 6 * 5) * 7 + 6 * 2 * 2
7 * 3 * (2 + (9 + 3 * 6) + 8 * (9 * 2 * 2 + 2) * 3 * 5)
6 + 5 * 7 * 9 * (8 * 2 * 6 * 5 + 9 * 6) * 2
5 * 3 + (8 * (9 + 3 * 2 + 9 * 4) * 2 * 7) + 2 * (2 + 8 * 6 + 5 + 7 * 3)
9 * 4 * (6 + (2 + 6 + 4 + 2 * 5) * 8 + 2 + 8) + 4 * 3 * (9 + 8)
3 * 6 + 9 + 6 * 3 + (7 + 7 * 2)
7 * (8 + (3 + 9 * 3) * 3 + 2 + 9 * 5) + (3 + (3 + 3 + 8 * 9))
2 * 2 * ((3 * 6) + 7 + 2 * (9 + 8 * 3 * 6) + 5) * (4 + (2 * 2 + 8 + 8 + 6 + 4) + (7 * 2 * 2 + 9 * 8 + 8) + 9 + 3)
(7 + 2 * 8 * 3) + 9
8 * 8 + (9 + 2 + 3 + 2)
(3 + 2 * 4 * 6 * 3) + 7
8 * 4 * 3 + (7 + 5 + 6 * 5 * 6) + 9
(2 * 3) + (8 * 2 * (6 * 3) * 5) * ((7 * 9 + 4 * 4) + 2 * (4 * 9 + 3) + 9 * (5 * 5) * 4)
2 + 6 * (3 + 5 * 7) * 2
(6 + (3 + 4) * 6 * 8) + 8
8 * 5 * 2 + (7 * (5 + 3 + 4 + 4) * 4 + 9)
5 * 9 * (5 + 8 + 9 * (2 + 7 * 2 * 6)) * 9
(5 + 9 * (6 * 7 + 9 + 6 * 8) * 8) * (3 + 7 + 2) * 2 + (9 + 6 * 4 * (9 * 3 * 4) * 5 * (7 * 4 + 3)) * 8
7 * 3 * 7 * 3 * ((3 + 2 * 9) + 6 * (3 * 2) + 4)
7 + 4 * (7 + 9 * 8) * 7 * 5 + 7
(7 + 9 * (2 + 4 * 9 * 4 * 7 + 4) * 3) * (8 * (2 * 4 + 6 * 2) * 6)
((3 * 6 + 4 * 6 * 4) * 6 * 8 * (9 * 4 + 2 + 5 + 3 + 9) * 5) * 6 + (9 + 8)
(3 * 3 + 4) * 4
(4 * (7 * 6 + 4 * 4 * 5) * 3 + 3) + 6 * 6 * (2 * 3 * (8 * 3 + 2 * 5 * 6 + 7) + 9 + 5) * 4 * 7
(2 * (5 * 6 + 9) * 7) + 3
5 + 9 + 2 * ((6 * 6) * (3 + 7 + 6 + 6) + 3 + 5)
4 * 2 * 9 + (3 + 4 + 5 * (4 + 8 * 5) * 9 + 5)
7 + 4 * 6 + 9 * 7 + 3
(8 * 7) + 7 * 3 * (7 * 9 * (4 + 4 + 7 * 5 + 7 * 2) + 9 * (5 * 5 * 8 + 7) * 3) + ((9 * 8 + 8) + 2 * 2) + 6
2 + 7 * 4 * 7 * (4 * 3 + 6 + 8 * 6) + 7
6 + (9 + 8 * (5 * 7) * 4) * (5 * 8 * 2 * (8 * 6 + 6) * 5 + 3) + 4 * 7
6 + 5 + (7 + (8 + 2) * 4 * 3 * 2 * 9) * 7
7 + 3 * 9
(5 * 5 + 8 * (9 * 4 * 3 + 6 + 8 * 2)) * (2 * 6 + 8) + 6 * 7
(2 + 8) * 9 + 4 + 4 * 2 + (3 * 3 + 9 + 2 + 9 + 5)
((5 * 4) + (3 * 4 + 3 + 4) + (8 + 3 + 3 + 9 + 2) + 4) * 9 * 7 * 9 + 6
9 + 3 * 4 * (9 + 6 * (9 + 8) + (8 * 4) * 5 + 2)
(4 + (3 + 2 * 4 + 7) + 4 + 2) * 4 * 7 * 3 * (2 * 8 * 9 * 5 + (3 * 3 + 8) * 3)
2 * 7 * (2 * 5 + 5 * (2 + 7 + 4)) * 7 + 2 + 4
4 * 2 * (6 * 6 + 2 + 2 + 6 * (2 * 2 * 8)) + 3 * 9
(5 * 9) + 2 + (3 * 8 * (8 + 4 * 3 + 7 * 9 * 5) * 2 * 6)
2 * 9
6 * 9 * 2 + 9 * (4 + 3) * (8 + 6 * 9 * 3 + 7 * (2 * 2 + 7 + 8 + 3 * 7))
3 * 8 + 9 + 4
9 + (4 * 9 + (6 * 9 + 6) + 2 * 6 * 9) * (2 * 4 * (3 * 5 * 2 + 2 + 8 * 6)) * 6
(3 * (3 * 6 + 8 + 3 + 7) * 9 * (8 * 3 * 4) + 6 + 3) + 8 * (4 + 9 + 3 + 2 + (4 + 4 * 6 + 2))
6 + 5 * 2 + 7 + ((9 + 2 + 4) * 6 + 5 * 8) * ((6 + 5 + 6 + 2) + (6 * 3 + 7) + 7 * 2 + (7 * 7 + 3 * 4 * 3 + 2))
((2 + 3 * 6 * 5) * 7 * 9 * 5 * 2 * 8) + 8 + 3 * 3 * 6
7 * (8 * 6) * 4 + 2 * 7 * 8
2 + 4 + (9 * 5 + 3)
5 + ((7 * 8) + 8 + 6 + 6 * 2 * 3) * 2 * 3
9 + (4 * 5 * (6 * 6 * 9 * 5 * 6 * 8)) * (8 + 5 + 3 * 7) + 9 * 3 * 4
8 + 4 * 5 * 2
5 + 2 + 8 + 4 * (9 * 2 * 6) * 3
4 * 6 * (5 * 2 + 3 + 5 + (8 + 5 * 7 * 4) + 4) * 8 + 2
(9 * 7 + 2 + (3 * 5 * 4 + 6 + 3 * 2) * (4 * 8)) * 3 + ((9 * 2 + 6) * 6 + 5 + 5 + 5) * 8
(8 + (2 + 2)) * 7 + (9 * 9 + 3) + ((5 * 4 * 9) + (2 * 6 + 9)) + 3 * 3
6 * 8 + 8 + 2 + 7 + (5 + 3)
2 + 2 * (4 + 5) * 6 + 4 * (6 * 8 + 4 + 2 * (9 + 5) * 3)
(5 * 5 + 6) + 8 + 3 * (2 * 3 * 3 + 6 * 7 * (6 + 7 + 8 * 6 * 4))
7 * 8 + 2 + 5 * (9 + 6 + (5 + 5 * 6 * 3 + 7) * 2 * 5 + (7 + 8))
6 * (9 + 5 * 3) * 7 * (9 * 5) + 3 + 4
(9 + (3 + 2 * 2) * 6) * 2 + 5 * 6 + ((9 * 2 + 4 + 5 * 7) * 2 * 7 + 5)
6 + (5 + 7 + 5 + 5 + 9 + 5) * (8 * 4 * 8 + 4) + 4 * 3 * 9
2 * 9 * 9 * (4 + 2) * 7 + (2 * (4 * 7 + 3) + 8 * 9 * 3 + 9)
5 * 5 * (6 * (8 * 2) + 8 * 8)
(4 * (5 * 9 * 2 * 8 * 5) * 8 + (6 + 3)) + (8 * 9 + 4 * (5 * 5 + 6)) * 4 + 6 * 4
9 * 6 + 6 + (7 * (3 + 3 * 9 + 7 * 7 + 5) + 3)
5 * ((5 * 3 + 5 + 7 + 2 + 3) + 8) * 6 + 9 * 7
(4 * 9 + 4 + 2 * (8 + 9)) * 6 * 4 + 9 + 5
5 * 4 + 3 + 2
(5 * (9 + 7 + 3 + 4) * (8 + 3 + 9 + 9 + 9) + 5 + 9) * (3 * 3) * 7 + (2 * 6) + 8
(7 * 6 + 7) * 7 + 9
((6 + 4 * 9 * 7 * 8) * 3 + 3 * 5 + 7) * 5 * 9 + (5 * 2 + (2 * 7 + 8 + 3)) + 5
(3 + 8 * 4 * 3 * 5 + 9) + ((8 + 3 + 9 + 3) * 8 * 5 * 5 * 3) * 4 + 9 * 6
4 * 3 + 2 * (9 * 6 * 3 + (9 + 3 + 4 + 8 * 4 * 4) + 3 + 6) * ((2 * 9) + 7) + 5
(6 * 9) * 2
8 * (5 * (7 * 4 * 5 * 3 + 4))
2 * 9 + 7 + (8 + 5 * 8 * 8)
8 + 5 + (2 + 3 * (7 * 8 + 3)) * 4 + 8 + 6
(6 * 4 + (3 * 6 + 7) + 9 + 5) + 4 + 4 + (5 * (9 * 7)) + 7 * 6
6 * (7 * 9 + 3 * 3 + 4) * 4 * 4 + 7 * 6
(2 * 5 + (5 + 5 * 9 * 3 * 4 * 9) * 7) * 8 + 9 * (6 + (9 * 4 + 3 + 2 + 9 * 3) * 4)
(6 + 6 * 6 + 6) + 3 + 6
3 + 5 * 6 + 8 * ((5 * 5 + 8 * 4) * 9 + 7 + 6)
8 * 9 + 5
4 * 3 + (8 * 2 + (3 + 5 * 4 + 9))
(4 + 9) * 3 * 3 + (7 * (6 + 5 + 7 + 9) * 4 * 2 * 2 + (9 * 4 + 7 + 4 + 7 * 3))
(2 + 8 * 6 + 2 + 8 * 6) * 2 + 7 * 5 + 3
8 + 3 + 4 + 7 * (5 + 8 + 3 * 8 * 2 * 3)
(2 * 3 + (2 * 6 * 2 + 2 + 8 + 2)) * 9 + (2 + 9) + 4 + 3 + 9
9 + 4 * 4 * ((4 * 6 + 2 + 8 * 7) * (3 + 8 + 6 + 3) * 3 * 3) + 4 + 6
(7 + 8 * 9 + 5) + (4 * 5 * 4 * 9 * 5) * 9
7 * (2 * 5 + 9) * 6 * 3 * 3
(9 * (4 * 9 * 9)) + (5 + (7 * 9 * 2 * 7 + 4) + (3 * 8 * 2 * 2 * 6 * 4) * 6 + (3 + 3 * 2 + 2)) + 2 + (5 * (2 * 5 + 3 * 3 * 4 * 7) * (8 * 4 + 7 + 8 * 5 * 2) * 3)
9 + ((2 * 6) * 3) + (9 * 2 * 8 * (7 + 3 * 5 * 3 * 7 * 8) * 7) + 4 * 4
6 + 9 * (2 + 7 + (7 + 5 + 2) * 5)
(7 * 2 * 4 + 8 * 2) + 8 * 4 + (7 * 3 * 2 * (5 + 8 + 6) * 3) * 6
5 + 9 + (4 * 4 * 3 * 5 + 9)
6 * 2 * 3
((6 + 5) + (8 * 7 + 3 + 6) + 5 + (3 + 2 + 9) + 9) * 6
7 * 9 + 2 + 7 + (8 * 9 * 9 + 2)
(8 + (7 * 4 * 2 + 5) * 8) * 3 + 8 + 2 + 9
((2 * 6 * 3) * (9 * 3) + (3 + 4 + 9) * 2 + (3 * 9 + 9 * 9 * 6 + 3) * (4 * 6 * 5 + 8 + 2)) * ((5 + 4 * 8) * 2 * 5) * 4
4 + (3 + 9 + 2 * 5 * 9) + 8 + (8 * 4 * (8 + 2 + 7 + 7 + 8 * 9) * 6 + 8 + 8) * 5
(4 * (7 + 5 + 8 * 4 * 4)) + 8 * 9 + 9
(7 + 2 * (7 * 4) * (7 * 4 + 6) + 5) + 3
9 * 4 * 5 + 3 + 9 + 5
4 * (5 + (4 * 8 + 4 * 5) * 6) + 4
6 + (7 + (7 * 8 * 3 * 3 * 9 * 3) + (7 + 9 * 7 * 9 + 3 * 6) * 4 + 3 + 4) + 6 + ((4 + 3 * 4 * 7 + 7) * 6 + 5) * 9
9 * 9 * 7 * (8 * (6 * 6 + 2 * 8 * 8 + 8) * 4 * 7 + 4)
(2 + 5 * 6 * (3 + 9)) * (3 + (7 + 9)) * 3 * 2
8 + 8 + 5 * (4 * (3 * 3) + 9 + 6 + 7 + 6) + ((5 * 4 + 7 + 5) + (6 * 9 + 9) + 5 * (9 + 9 + 2 * 4 + 6 * 4) + (4 + 5 + 7 + 8 + 6)) + 6
8 + (4 * (3 + 8) * 7) + 6
6 + 9
4 * (8 + 4 * 5 * 6) * 6 + 2 * 3
6 * 7 * 8 + 9 * 7
((9 * 5 * 2) + 9 * (7 + 6) + 4) + 5 + 3 + 3
9 + 4 * (5 + (8 * 3 + 5 * 9 + 9 * 5) * 2) + (3 + (5 + 4 * 3) * (5 + 2) + (7 * 9)) * 3
2 + (9 + 9 + 5 + 6 + (2 + 9 * 9) * 6) * (9 + 4 + 3 * 7 * 7 + 4)
3 + (8 * 9 * 6 * 2 + (2 + 9 * 3 + 9) * 5) + 7 * 6 + (8 * 5 + (8 + 3))
(6 * (3 + 5) * 2) + 6 * (4 * 7 * 2 + 2 + 8 * 3) + 8 + 4 * 9
3 * 9 * ((9 + 3 + 6 * 7 + 8) * 2 * (9 * 6 * 6 + 5 + 9 * 2)) * 6 * 2 + 3
9 * (6 + 8 + 6 * 6 * 2) + 5 * 3
(3 + 8 + 7 * 8 + 6 + (3 + 2)) * 4 + 2 + 4
((7 + 7 * 4 + 5) * 9 * 9 * 8) + 9 * 8 + 7
3 + ((4 * 9 + 4 * 5 * 2 * 7) + 7 + 2 + 8 * 2) + 5 * 6 + 8 + 5
(4 * 6 + 4 + 5) + 7 * ((6 + 9 * 2 + 8 * 3 * 4) * 9 * 9 + 4) + 3 + 3
6 + (9 * 7 + 2 * (7 + 6 + 6 + 4 * 8 * 9) + 3 * 3) * 2 + 8 * (4 * 9)
9 + 4 + 6 + ((6 + 8 * 2 * 7 * 2) * 8) + 8
(6 + 5) + 2 + 4
(4 * (2 + 5 * 9) + 4) + 4 + 2 + 3 * (5 + 8 + (9 + 9 + 4)) * 6
(7 + 8 * (9 + 8 + 8)) + 5 * 7 + 9
5 + 6 + (9 * 6 * (3 * 4 * 5 * 2) + (5 * 4 + 4 * 2 + 6 + 5)) + 9
((2 + 4) * 5) * 5 * 3 + 3 + 2
8 + (8 + 9 + (9 * 5 * 4)) * 8 * (6 + 8 * 2 + 6 * (3 + 6 * 9 + 2)) + 8 * (5 + (8 + 3 + 6 * 3))
6 * (2 * 7 * 5) + 8
4 * 5 + 8 * (7 + 4)
(7 + 4 + 8 + 4 * 4) * 8 * 5 + ((7 * 6 * 4) + 5 * 6)
7 * ((7 * 3 + 6 * 6 * 2 * 3) * 4 + 8 * 5 + 5) + (9 * 3 + 2 + 2 + 3 + 4) + (7 + 2 + (8 * 8 + 6 + 7 + 7)) * ((5 + 6 * 4 * 3 + 7 + 5) + 2 * 5 + 4 + 5) * 4
4 * (9 * 7 + (7 * 7 + 7 + 3) * 8)
3 + (8 * 8 * 9 + 5 * (3 * 2 + 2 + 2 * 2 + 8)) + (5 * (8 * 4) * 2 + 7 * (7 * 4 + 7 + 2 * 4 * 3) + 6) + 9 * 2 + (4 * (2 + 9 * 6 + 7 + 5 + 7) * 2 + (7 * 5 * 5 + 6 + 6) + 4 * (8 + 5))
((6 * 9 + 3 * 3 + 8) * (3 + 9) * 2 * 2 + 3 * 8) * 3
2 + 5 + (3 + 4 + 8 * 8) * 4 + 6 + 4
(6 * 6) + 9 * ((2 * 2 + 4) + 6 + 9 * 8 * (7 * 4 * 3 * 8 * 3)) * 7 * 2 + 3
9 * 4 + 2 * (3 * 6) * 8 + 3
(9 + 7) * 2 * 7 * 3
(8 * 7 + 2 + 8 * 3) * (3 * 7 * 2 * 2) + 4 * 3 * 3 + 6
(2 + 7 + 7) * 9 + 7 * 7
4 * (9 * 4 + 8 + 9 * 9) * 3 + (3 + 2 + (4 * 2 + 2 + 4 + 9 * 8) * 4) * 9 * 9
4 * 6 * ((4 * 7 + 4) * (2 + 8 + 7 * 5 + 2 * 7)) + 2 + 3 * 5
2 + 2 + 6 + (4 + (7 * 3)) + 5
(9 * (3 + 8 * 3 + 9) + (8 + 4 * 2 * 8 * 2 * 6) * 9 + (5 * 7 * 7) + 5) * 3 + 3
3 * 8 + (6 * 6 * 7 + 3 + 5 + (2 * 7 * 4 + 2 * 3 + 4)) + 8 + 7
7 * 7 + (6 * (3 * 4 * 4 + 7 + 4) * 7 * 7 + (7 + 4 * 4 + 6 * 9 * 7)) * 2 + 8
7 + 3 + 4 + (2 * 4 + 9 + 6 + 8) * 5 + 5
((5 * 7 + 4 + 8 + 8 * 5) + 3 * (3 + 3 + 5 * 9 + 2) * 6) + 2
6 * (8 * 4 + 7 + 7 * 8) * (5 * (2 + 2 + 4 + 8 + 6)) + 6 * 5
3 + 7 + 7 * (3 + 9 * 6 * 6) + 4 * 5
3 * ((4 + 3 * 9) * 4 + 2 * 5 + 6 + (5 + 2 + 2 + 4 + 8)) * 6 * 9 + 3 * (9 + 5 + (9 + 9 + 6 * 6 + 6 + 2) * 3)
(8 + 5 * 6 * 4 + 2 * 4) + (2 + 5 * (9 + 3 * 8 * 8) + 8 * 2 * 4) * (3 + 7 * (8 * 4 * 4 * 8)) * 9 + 8
6 * 6 + (6 + 3 + (8 * 8 * 8 + 5 + 3 * 6) + 7)
3 + 7 + ((3 * 6 + 4 + 9 * 3) * 9 * 7 + 2) + (8 + 2 * 3 * 8 * 7) * 6 + 5
2 + ((7 * 7 * 3) + (4 + 8 + 3 + 5) + 3 + 7 * 9 + 7)
9 * 9 * 7 + ((8 + 7 * 8 * 8 + 6 + 8) + 3 + 2 + 6 + 9)
3 + ((3 + 8 * 5) + 7 * 2) + (2 + 9)
((7 * 2 * 3 * 3 * 9) * 6 * 2 * (3 * 4) + 5) * 4 + 6 + 6 + 2
6 * 3 * 2 + 2 + 4 * 9
4 * 4 * ((2 * 4 * 4 * 2 + 9 + 7) + 9 + 8 + 5) * 9
6 + 4 * 4 * (7 + 6 + (3 * 7 * 6)) + 5
9 + 3 * ((7 * 9 * 7 * 7 + 5 * 4) * 6 * 3 + 3) * 7 * 5
3 + (8 + 6 + (7 * 3 * 9 + 4) + 9 + (3 + 8 + 9 * 8 + 5 * 6) + 8) + ((9 * 2 + 3 * 9 + 6) * 5 * 2 * 7 + 2 + 3) * (6 + (5 * 6 * 5 * 5 * 2) + 4 + 4 + 9) * 7 + (9 * (5 + 3 + 3 * 4 * 7) * 7 * 9 * 8 + 4)
2 * 4 * 3 + (4 + 7 * 4)
(4 * (6 + 4)) * 2 * 9
((8 + 8 + 2 + 4) + 5 * 8 + 2 + 5) * (5 + 9 * 6 + 5 + 9) * 8 * 4 + 7
2 + (7 * 6 * 7 * 4 * 2)
((7 * 5 + 4 * 8) * 5) + 4 + 7 * 8 * 8 + 3
4 + ((6 + 6 + 5 + 8) * 5 + 5 * 2)
(9 + 6 * (6 * 6 + 9 + 5) + 4) * 3 + ((6 + 5 * 2 * 7) * 2)
(3 * (6 * 9 + 9) * 9 * 3) + 2 + 7 + 5
5 * ((6 + 9 + 6) + 7)
2 + 5 + ((9 + 3 + 6 + 4 + 2 + 7) * 7 * 8 * 4 + 8 * 6) * 2 * 2
((4 * 7) + 9 + 7 + 8 + 3) + 6 * 5
(3 + 6 + 7 + (7 * 5)) * 6 + 8 * 9
9 + 5 * 6 * 9 + (8 + 6 * 6)
(7 * (9 + 8 * 4 * 7 + 3) + 8 * 3 * 3 * (6 * 8 * 8 * 3 + 9)) + 8 * 5 + 6 * 6
3 * 4 * ((9 + 2) * (7 * 4 * 9 + 5 + 7)) + (6 + 7 + 8) + 2 * 9
4 + 4 + 4 + 3
6 + 6 * 6 * ((5 + 4 + 5 * 5 + 6 * 9) * (6 * 3 * 9) + 7 + (2 * 4 + 3 * 4) + 6) + 9 + 3
4 * 5 + 5 * (8 + 4 * 7 + (3 * 6 + 3 * 6 + 5 + 9) * (4 + 5 + 6 * 7 + 7 * 8)) * 3
4 * (5 + (2 + 8 + 8 * 7 * 3 * 9) * 4 + 4 * 4) + 3
5 + (3 + (9 + 5 * 7) + 9) + 2
3 * (4 + 9)
9 + 5 * 7 + (7 + 5 + 8 * 3 * 7) + 8 + (2 + 3 * 9 * 4 + 3)
8 + (9 + 8) + 5 * 2 + 9 * ((4 * 8 + 5) * 3 * (8 + 3 + 6 + 5 + 7 * 4) * 5)
7 * 8 * 9 + 9 * (4 + (7 * 9 * 7 + 9))
7 * ((5 * 6 * 4 * 2) * 9 * 7 + 3) + 3
2 + 9 * 4
2 * 2 + (5 + 2 + 4 * 5 + 5) + 5 * 5
4 * 8 + 9 * (7 * 9 + 9 + 8) + 8
9 + ((6 + 6 + 2 * 2 * 9 * 9) * 8 * 9 * 4 * 6)
((2 + 8 + 9 * 4 + 7) * 7 * 5 + 3 + 9) * 4 * 3 + 7
(8 * 8 + (5 + 3 + 9 * 9)) + ((7 + 5 + 5) + 2 + 7) * (9 + 4 + 4) + 8 + 4 * 8
(9 * 6 * 3) * 3 * (6 * 2 + (3 + 4 + 2) * (7 + 9 * 5 + 5)) + 8 + 6
(8 + (3 + 8 * 3) * 3 * 6 + 5) + 5 + 7
((9 + 8) + (6 + 2) * 7) * 2 + 6 * 4 * 2
3 + 6 + (3 + 2 + 2 + 6 * 5 + 3)
(6 + 4 + (2 + 3 * 4 + 3) + 4 + (3 * 2 + 5) * 8) + 9
(3 + 3 + (9 * 4) * 2) + 5 * 7 * 3 * (8 + 4) + 6
(3 + 7) + 7 * (4 + 7 * (9 + 2 * 7) + 8 * 5 * 8) * 3
((2 * 4 * 5 * 4) + 3 + 3 * 7 + (8 * 2 + 6)) + 8
(5 + 6 + 9 + 8 + 8 + 3) * 2 + 6
4 + 6 + 8 + (9 * 8 * 2 + 6 * 4 + 3) * 5
(2 * 2 * 5 * 7 + 4) * 6 + 7 + 5 * (9 + 7)
5 * 9 + (7 * 4 + (9 * 7) * 5 * 7) + 5
(3 * 6 + 8) + 7 + 8 + 3 + 4
4 + 3 * 3 * 3 + 7 * (5 + 9 + 6 + 5 + 6)
3 + 9 + 8 * 4 + (6 * 7 * 3 + 7 * 5)
8 * 3 * (9 * (4 * 8 * 7 * 9 + 3 * 9) * 2 + 5 * 7) * 4 * 4
5 * 7 * (4 * (9 * 7 * 7 + 5) * (7 + 5 * 9 * 6 + 8) + 4 * 6 * (4 + 6 + 6)) + 3
4 + ((4 + 2) + 7 * (3 * 4 + 4 * 9 + 6 + 8)) + 7 * 4 + 5 * 7
((6 + 2 * 6) * 2) + (5 * 9 + 9 + 7) + 7 * 4 * 2
4 + 7 * 8 * 7 + (3 * 7 + (4 * 6 * 5 * 2)) * 5
6 + (9 + 6 * 4 + 6 * 6 + 3) * 5 * 2
8 * 3 * 7 * (6 + 3 + (7 * 6 * 5 + 9 + 4) + 6 * (2 * 7 + 5 + 6) + 3) * (6 * 4 + 2 * 9 * 7 + 6)
2 * (5 * (9 + 6)) * (4 + (5 * 2 + 3) + 7 * 6 * (8 * 4 * 4) * 4) * 5
2 * 2 * (3 + 8 + (4 * 3) + (6 + 5 + 6 + 8 * 5 * 4) + 8) + 3 * 3 + 8
4 * (8 * 4 * (3 * 6) + (5 + 3 + 4 * 6 + 4 + 7) * 4) + ((8 * 2) * (2 * 7) + (9 + 7 * 2 + 2))
3 * 4 + (7 * 8) + (5 + 7 * 8 + 9) * 9
(9 * 4) * 5 * 3 * 9 + 5 + 7
(7 * (9 * 4 + 9 + 5) * (2 + 3 * 3 + 8 + 2)) * 5
((9 * 2 * 9 + 8 + 8 * 3) * 5 * 7 + (2 * 2 * 3 * 2) + 6) + (7 + 8 * (4 + 2 * 9 * 6 + 3 * 9) * 4 * 2) + ((4 + 9 * 9 * 5 * 5) + 2 + 8 * 9 * 2) + 9 * 6
9 + 7 + 9 * (9 + 4 * 5) * 7
7 + 8 + ((2 + 3) * 4) * 6
6 * 4
(9 + 4 * (6 * 2 + 2 + 7 * 6) * 4) * ((6 + 8 + 7 + 4 + 9) + (7 + 9 + 8 + 6)) + (2 * (3 + 8) + 7 * (4 + 3) * 5)
(9 + (2 + 4 * 3 + 3 + 2 + 2) + 4 + (2 + 3) + 3) * ((6 + 6 + 7 * 6) * 2 + 3 + 9 * 4 + 8) * 2 * 2 + (9 + (5 * 6 * 8 * 3))
(8 * (4 + 9 * 3 + 6 + 6) * 7 * 6) * 5 + 4 + 8 * 8
3 * (8 * (4 * 2 + 6 * 6) * 5 + (9 * 6 * 3 + 4 * 4) + (5 * 2 + 7 + 5 + 5))
3 * ((6 + 7 + 7 * 9 + 4) * 6 + 8) + 8 + ((7 * 9 + 5) + 5 + 6) * (5 * 6 + 2 * 6 * 6 + 7)
(3 + (8 + 9) * 5 * 6 + 8) * (2 + 6 + (7 + 4 + 6) * 4 + 3) + 6 + 2 * (7 + 8 * 5 + 7)
5 * (2 + 2 * 6 * (6 + 2 * 4 + 8) + 4 * 5)
4 * 9 * 7 + 7 * 3
((7 + 7 * 6) * (5 * 9 * 6)) * 5 + 5 + 3 + 8 + 4
(4 + (5 + 7 + 7 + 7)) * 4 * (7 * 7 + 3) * 6 * 3 * ((4 * 7) + 4 * 9)
2 * 2 + 6 * ((8 * 9 + 7 * 7) * (5 * 9 * 6 * 6 * 7 + 6) + 5 * 4) + (8 * 7 + 5 * 5)
9 + 6 * ((9 + 5 + 2 + 7 + 3) * 3 * 6) + 9 + 7 * 9
4 * (8 * (4 + 6 * 4 + 8 + 2 + 3) * 5 + 8 * 5) * ((5 + 4 + 2 + 3 * 2 + 9) * (4 * 8 + 9 + 4 * 4 + 4)) + 2
9 + (3 * 3 + 4 + 5 + 6) + 3 + (5 + 7) + (3 + 5)
((3 * 3) + 9 + 4 + 8 + 9 + 2) * (7 * (8 + 8 * 7) * 4 + (4 * 4 + 2 * 5 * 2) * 9)
2 + (7 + (6 * 2 * 4 + 2 * 9 * 2) * 4 * 5) + (4 + 5)
2 + (4 + 3 * 5 * 3 + 3) + 5
6 * 6 + 4 + 8 + 4
((3 + 4 + 2 + 6) + 8) + 2
(4 + 2 * 4 + 6 + 8 * 3) + (3 * 8 + 9 + 7 * 5 + 2) + 7 * 6 * (6 * 3 * 5 * 6) * 6
5 * 6 + (8 * (6 + 6 * 4 + 2) * (2 + 5 + 4 * 7 + 3 * 6) + 8 + 4) * 6 * 6
3 * 6 * 5 * (3 + 4 + 3) * 3 * 5
9 * (4 * (3 * 9 * 4 * 9 + 6 * 7) * 7 + 7 * 7)
7 * 4 + 2 + (7 + (3 * 4) * 9 * 8) * 2
(3 * (9 * 3 + 4) * 3) + 2 + ((3 + 7 + 6 + 4 * 6 + 9) + (3 * 7)) * 8
(4 + 3 + 6 * 7) * (7 * 7 * (8 * 4 + 2 * 8 * 2 + 3) + 4 + 8 * 3) * 8 + 2
3 + (9 + 2 * 3)
7 * 7 * 5 + (2 * (3 + 8 + 2) + 7)
4 * (7 + 7 * 9) * ((8 + 2 * 4 * 6 + 4 + 9) * 5 * 6 + 3 + 3) + (4 + 4 * 2 * (4 + 4 + 3 + 3 + 7) + 2)
2 * 2 + 2 * 9 + 9
9 * 4 + (2 * 5) + 8 * 5
(8 + 9 * (2 * 2 + 3 * 9 * 3 + 3) * 8 * 8) * (9 * 4 * 6 * 7)
7 * (6 * 8 * 8 * (3 * 2 + 4 * 7 + 9 + 6) + (4 + 9 * 3 * 3 + 7 + 3)) + (4 * 3) * 5 * 8 * 4
4 * 8
7 * 2 * (4 + 2 * 7) + ((3 * 2 + 2 * 9 * 6 + 7) + 8 * 6 * 6 + 9) * 7 + 5
(4 * (2 + 4 * 4 + 4) * (8 + 7)) * 7 * 8 * 9 * 9
9 + 5 * 3 * (8 + (9 * 5 + 4 * 3) * 7 * 7 * (6 + 4 * 5 + 7 * 2 + 5)) + 3
(4 * 4 * 9 * 8 + (7 * 2 + 9 * 6 + 4)) + 5
(8 * 4 * 8) + 9 * (7 * 5) * 5
(3 * 4 * 9 * 9 + (5 * 8 * 5 + 4 + 7) + (7 * 8 * 5 + 9 + 5 + 5)) + 2
(8 * 3 + 2 + 9 + 2 + 2) + 3
8 * (9 + 7) + 7 * 2 * (8 + 3 + 5 + 7 + 6) + 2
2 * (2 * 6 + 8 + (7 + 6 + 2) + 3 * 6) * (5 + 8 + 7 + (9 + 9 * 3 * 7)) * 7 + 4
(5 + 5 + 8 * (5 + 2 + 3)) * 9 * 9 + ((2 * 6 * 6 * 9) * 5 + 4 * 6) + 5
5 + 3 * 4 * (3 + 4 + 8) * (3 * 9 + 9 + 7 * 8)
6 * 4 + ((7 + 3 * 3 + 3) + (3 * 7) * 3 + 9 * 2)
(5 * 3 * 7 * 2 + 6) * (2 * 6) + 6
7 * 4 + (6 + 2 * 3 * 9 + (8 + 9) * (5 + 2 + 2))
2 + 2 + ((9 * 2 * 4 + 8 + 3 * 7) * 4 + (2 + 6 + 5 * 5 * 2 + 8) + 5 * 2 * 8) + 4
((2 + 3 + 2 * 8 * 4 * 6) * 4 * 2 * 8 * 5 + 5) + 8 * 9
5 + 4 * (5 + (4 * 4 * 8) * 3 + 3)
4 * 3 + (7 * 4) + 8
4 + (9 * 8 * 5 * 4) + 2 + 4
4 + (7 + 9 * 6) * 5 + 4 + 4 + 6
(2 + 9 * 3) * 2 * (7 + (5 + 8 * 7) + 8)
4 * 3 + 6 + 3 + ((5 + 6 + 7) * 5 * 2)
9 + 8 * (4 + 3) * 4 + 6 * 9
4 * (6 + 5 * 5 * 8 * 6 * 6)
(8 + 7 * 4 + 4 + (2 + 8 * 2 + 4 + 6 + 2)) + 3
2 + (9 * 4) * 7
4 + 7
(9 * (2 * 2 + 4) + 3 * 3 + (7 * 4 * 6 * 4 + 5 + 4) * (8 * 8 * 7 + 8)) * 6 + 3 + 7 + (6 * 5 * 8 * 6) + 2
2 + 6 + (4 + 2 * 7 + 3 * 9 * 9) * ((8 + 2 * 4 * 4 * 2 + 3) + (3 + 9 + 4) * 3 * 4) + 8
8 + (6 * 5 + 2 * 6 * (2 * 3 + 2 * 9 * 7 * 2) + 6) * 2 * 8 + 7 + (6 * 5 * 9 * 6)
6 + (3 + 9 + 3 * 6)
(2 + 5 * 9 * 2) * 2 * 5 + ((4 * 2 * 7 + 8 + 7) + 7 + 6 * 4 * 3 * 6)
(7 + 3 * 6 * (2 * 7) + 7 * 8) * 7 * 2 + 4 + 5 * 2
(6 * 2 * 5) + (7 + 7) * 9 * 5 * 2 * 5
3 * (8 + 3 * 3 * 2) + 5 + (9 * (5 + 8 * 8 * 5 + 8) * 4 + 7 * 8 + 3)'''

input = input_raw.split("\n")

input_test_raw = '''1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2'''

input_test = input_test_raw.split("\n")

# Uncomment this row to use test input
#input = input_test

# PART 1
import shlex

# Function to find the first open bracket to the left from a given position
def find_open_bracket(lst, pos):
    for i in range(1, pos + 1):
        j = -(len(lst) - pos) - i
        token = lst[j]
        if (token == '('):
            return len(lst) +j
    return None

# Compute simple expression 'a + b * c ...' with a,b,c,etc being single numbers
# + and * has the same priority
def compute_simple_exp(token_lst):
    result = 0
    operator = '+'
    for token in token_lst:
        if token.isnumeric():
            if operator == '+':
                result += int(token)
            elif operator == '*':
                result *= int(token)
        else:
            operator = token
    return(result)

# Compute the left-most non-nested bracket in an expression
def compute_first_brackets(token_lst):
    for i,token in enumerate(token_lst):
        if token == ')':
            open_bracket_pos = find_open_bracket(token_lst, i)
            result = compute_simple_exp(token_lst[open_bracket_pos+1:i])
            return (result, open_bracket_pos, i) # return numeric evaluation of bracket and positions of open-close brackets
    return None

# main
exp_eval_results = []
for row in input:
    tokens = list(shlex.shlex(row))  
    # continue evaluating the left-most non-nested brackets (...) until no brackets left
    while(True):
        first_bracket_eval = compute_first_brackets(tokens)
        if(first_bracket_eval is None): # No more brackets
            exp_val = compute_simple_exp(tokens)
            break
        (first_bracket_value, open_pos, close_pos) = first_bracket_eval
        tokens = tokens[0:open_pos] + [str(first_bracket_value)] + tokens[close_pos+1:]
    exp_eval_results.append(exp_val)
#print(exp_eval_results)
print('-'*30 + 'PART 1' + '-'*30)
print('Part 1 answer: {}'.format(sum(exp_eval_results)))


# PART 2
# Compute simple expression 'a + b * c ...' with a,b,c,etc being single numbers
# now + is executed before *
def compute_simple_exp_p2(token_lst):
    result = 1
    token_lst_txt = ''.join(token_lst)
    factors = token_lst_txt.split('*')
    for f in factors:
        result *= sum(list(map(int,f.split('+'))))
    return(result)

# Compute the left-most non-nested bracket in an expression
def compute_first_brackets_p2(token_lst):
    for i,token in enumerate(token_lst):
        if token == ')':
            open_bracket_pos = find_open_bracket(token_lst, i)
            result = compute_simple_exp_p2(token_lst[open_bracket_pos+1:i])
            return (result, open_bracket_pos, i) # return numeric evaluation of bracket and positions of open-close brackets
    return None

# main
exp_eval_results = []
for row in input:
    tokens = list(shlex.shlex(row))  
    # continue evaluating the left-most non-nested brackets (...) until no brackets left
    while(True):
        first_bracket_eval = compute_first_brackets_p2(tokens)
        if(first_bracket_eval is None): # No more brackets
            exp_val = compute_simple_exp_p2(tokens)
            break
        (first_bracket_value, open_pos, close_pos) = first_bracket_eval
        tokens = tokens[0:open_pos] + [str(first_bracket_value)] + tokens[close_pos+1:]
    exp_eval_results.append(exp_val)
#print(exp_eval_results)
print('-'*30 + 'PART 2' + '-'*30)
print('Part 2 answer: {}'.format(sum(exp_eval_results)))